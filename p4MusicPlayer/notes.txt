const audio = new Audio();

The spread operator (...) allows you to copy all elements from one array into another. It can also be used to concatenate multiple arrays into one. In the example below, both arr1 and arr2 have been spread into combinedArr:
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];
const combinedArr = [...arr1, ...arr2];
console.log(combinedArr); // Output: [1, 2, 3, 4, 5, 6]

An arrow function is an anonymous function expression and a shorter way to write functions. Anonymous means that the function does not have a name. Arrow functions are always anonymous.
Here is the basic syntax:
Example Code
() => {}
To create a named arrow function, you can assign the function to a variable:
Example Code
const exampleFunction = () => {
  // code goes here
}

The map() method is used to iterate through an array and return a new array. It's helpful when you want to create a new array based on the values of an existing array. For example:
Example Code
const numbers = [1, 2, 3];
const doubledNumbers = numbers.map((number) => number * 2); // doubledNumbers will be [2, 4, 6]

The join() method is used to concatenate all the elements of an array into a single string. It takes an optional parameter called a separator which is used to separate each element of the array. For example:
Example Code
const exampleArr = ["This", "is", "a", "sentence"];
const sentence = exampleArr.join(" "); // Separator takes a space character
console.log(sentence); // Output: "This is a sentence"
Example Code
array.map().join();

Optional chaining (?.) helps prevent errors when accessing nested properties that might be null or undefined. For example:
Example Code
const user = {
  name: "Quincy",
  address: {
    city: "San Francisco",
    state: "CA",
    country: "USA",
  },
};
// Accessing nested properties without optional chaining
const state = user.address.state; // CA
// Accessing a non-existent nested property with optional chaining
const zipCode = user.address?.zipCode; // Returns undefined instead of throwing an error

The sort() method converts elements of an array into strings and sorts them in place based on their values in the UTF-16 encoding.
Example Code
const names = ["Tom", "Jessica", "Quincy", "Naomi"];
names.sort() // ["Jessica", "Naomi", "Quincy", "Tom"]

The find() method retrieves the first element within an array that fulfills the conditions specified in the provided callback function. If no element satisfies the condition, the method returns undefined.
In the example below, the find() method is used to find the first number greater than 25:
Example Code
const numbers = [10, 20, 30, 40, 50];

To get the index for the current song, you can use the indexOf() method. The indexOf() array method returns the first index at which a given element can be found in the array, or -1 if the element is not present.
Example Code
const animals = ["dog", "cat", "horse"];
animals.indexOf("cat") // 1

The forEach method is used to loop through an array and perform a function on each element of the array. For example, suppose you have an array of numbers and you want to log each number to the console.
Example Code
const numbers = [1, 2, 3, 4, 5];
// Using forEach to iterate through the array
numbers.forEach((number) => {
  console.log(number); // 1, 2, 3, 4, 5
});

One way to randomize an array of items would be to subtract 0.5 from Math.random() which produces random values that are either positive or negative. This makes the comparison result a mix of positive and negative values, leading to a random ordering of elements.
Example Code
const names = ["Tom", "Jessica", "Quincy", "Naomi"];
names.sort(() => Math.random() - 0.5);

The filter method keeps only the elements of an array that satisfy the callback function passed to it:
Example Code
const numArr = [1, 10, 8, 3, 4, 5]
const numsGreaterThanThree = numArr.filter((num) => num > 3);
console.log(numsGreaterThanThree) // Output: [10, 8, 4, 5]

createElement() is a DOM method you can use to dynamically create an element using JavaScript. To use createElement(), you call it, then pass in the tag name as a string:
Example Code
// syntax
document.createElement(tagName)
// example
document.createElement('div')
You can also assign it to a variable:
Example Code
const divElement = document.createElement('div')

The createTextNode() method is used to create a text node. To use it, you call it and pass in the text as a string:
Example Code
document.createTextNode("your text")
You can also assign it to a variable:
Example Code
const myText = document.createTextNode("your text")

appendChild() lets you add a node or an element as the child of another element. In the example below, the text "Click me" would be attached to the button:
Example Code
const parentElement = document.createElement("button")
const parentElementText = document.createTextNode("Click me")


---gpt---
Here's a cheat sheet of the key concepts and techniques introduced in this lesson on building a music player:

JavaScript Concepts and Techniques
1. Event Listeners
Attach actions to DOM elements when specific events occur:

playButton.addEventListener("click", playSong);
shuffleButton.addEventListener("click", shuffle);

2. Template Literals
Used to dynamically create HTML with JavaScript:

const songsHTML = array.map((song) => `
  <li>
    <span>${song.title}</span>
    <span>${song.artist}</span>
  </li>
`).join("");

4. Arrow Functions
Concise syntax for writing functions:

const addTwoNumbers = (num1, num2) => num1 + num2;

5. Optional Chaining (?.)
Simplifies access to deeply nested properties:

const song = userData?.songs.find((song) => song.id === id);

6. Array Methods
.map(): Create an array or HTML from objects.
.filter(): Remove items from an array.
.sort(): Sort an array alphabetically or numerically:

userData.songs.sort((a, b) => a.title.localeCompare(b.title));

7. Object Destructuring
Extract specific properties from objects:

const { title, artist, duration } = song;

8. DOM Manipulation
Modify elements dynamically:

document.getElementById("player-song-title").textContent = currentTitle;

9. Ternary Operator
Simplify conditional assignments:

const currentTitle = userData?.currentSong?.title || "No song playing";

Best Practices

1. Modularity
Breaking the code into smaller reusable functions:
playSong(), pauseSong(), shuffle(), deleteSong().

2. Accessibility
Adding ARIA attributes for better user experience:

playButton.setAttribute("aria-label", `Play ${song.title}`);

3. Fallback Handling
Ensuring the app behaves predictably when data is missing:

const song = userData?.songs[0] || {};

4. Graceful Degradation
Handling scenarios where songs are deleted or the playlist is empty:

if (userData.songs.length === 0) {
  const resetButton = document.createElement("button");
  resetButton.textContent = "Reset Playlist";
}